var EventTracker = (function(){function a(b, c){this.$target = b; c = c || {}; this.endDelay = c.endDelay || 0; this.maxPipeCount = c.maxPipeCount || 0; this.onStart = c.onStart || function(e, d){}; this.onMove = c.onMove || function(e, d){}; this.onEnd = c.onEnd || function(e, d){}; this.offset; this.handlers; this.pipes = {}; this.currPipeCount = 0}a.prototype = {initialize:function(){this.handlers = {mousedown:$.proxy(this.onMouseDown, this), mousemove:$.proxy(this.onMouseMove, this), mouseup:$.proxy(this.onMouseUp, this), touchstart:$.proxy(this.onTouchStart, this), touchmove:$.proxy(this.onTouchMove, this), touchend:$.proxy(this.onTouchEnd, this)}}, attach:function(){this.detach(); this.offset = this.$target.offset(); this.$target.on("mousedown", this.handlers.mousedown); this.$target.on("mousemove", this.handlers.mousemove); this.$target.on("mouseup mouseleave", this.handlers.mouseup); this.$target.on("touchstart", this.handlers.touchstart); this.$target.on("touchmove", this.handlers.touchmove); this.$target.on("touchend touchcancel", this.handlers.touchend)}, detach:function(){this.$target.off("mousedown", this.handlers.mousedown); this.$target.off("mousemove", this.handlers.mousemove); this.$target.off("mouseup mouseleave", this.handlers.mouseup); this.$target.off("touchstart", this.handlers.touchstart); this.$target.off("touchmove", this.handlers.touchmove); this.$target.off("touchend touchcancel", this.handlers.touchend)}, getPosition:function(d){var c, f, b; c = d.pageX - this.offset.left; f = d.pageY - this.offset.top; b = new Point(c, f); return b}, startPipe:function(c, b){if (this.pipes[b]){if (this.pipes[b].ender){this.cancelEnder(b); this.movePipe(c, b); return}this.endPipe(null, b, true)}if (this.maxPipeCount && this.currPipeCount >= this.maxPipeCount){return}++this.currPipeCount; this.pipes[b] = {lastPos:c}; this.onStart(c, b)}, movePipe:function(c, b){if (!this.pipes[b]){return}if (this.pipes[b].ender){return}this.cancelEnder(b); this.pipes[b].lastPos = c; this.onMove(c, b)}, endPipe:function(d, b, c){if (!this.pipes[b]){return}this.cancelEnder(b); if (!this.endDelay || c){if (c){d = this.pipes[b].lastPos}this.pipes[b] = null; this.onEnd(d, b); --this.currPipeCount; return}this.movePipe(d, b); this.scheduleEnder(b)}, scheduleEnder:function(b){if (!this.pipes[b] || this.pipes[b].ender || !this.endDelay){return}this.pipes[b].ender = window.requestTimeout($.proxy(function(){this.endPipe(null, b, true)}, this), this.endDelay)}, cancelEnder:function(b){if (!this.pipes[b] || !this.pipes[b].ender){return}window.clearRequestTimeout(this.pipes[b].ender); this.pipes[b].ender = null}, onMouseDown:function(c){if (c.which !== 1){return}c.preventDefault(); var d, b; d = this.getPosition(c); b = "mouse"; this.startPipe(d, b)}, onMouseMove:function(c){if (c.which !== 1){return}c.preventDefault(); var d, b; d = this.getPosition(c); b = "mouse"; this.movePipe(d, b)}, onMouseUp:function(c){if (c.which !== 1){return}c.preventDefault(); var d, b; d = this.getPosition(c); b = "mouse"; this.endPipe(d, b, false)}, onTouchStart:function(g){g.preventDefault(); var f, j, h, c; f = g.changedTouches; for (var d = 0, b = f.length; d < b; ++d){j = f[d]; h = this.getPosition(j); c = "touch" + j.identifier; this.startPipe(h, c)}}, onTouchMove:function(g){g.preventDefault(); var f, j, h, c; f = g.changedTouches; for (var d = 0, b = f.length; d < b; ++d){j = f[d]; h = this.getPosition(j); c = "touch" + j.identifier; this.movePipe(h, c)}}, onTouchEnd:function(g){g.preventDefault(); var f, j, h, c; f = g.changedTouches; for (var d = 0, b = f.length; d < b; ++d){j = f[d]; h = this.getPosition(j); c = "touch" + j.identifier; this.endPipe(h, c, false)}}}; return a}()); var ReversibleAction = (function(){function a(){}a.prototype = {doAction:function(b){if (b){b()}}, undoAction:function(b){if (b){b()}}}; return a}()); var SimpleReversibleAction = (function(){var a = ReversibleAction; function b(d, c){a.call(this); this.forwards = d; this.backwards = c}b.prototype = {doAction:function(c){this.forwards(); if (c){c()}}, undoAction:function(c){this.backwards(); if (c){c()}}}; ClassUtil.extend(b, a); return b}()); var ReversibleTweenAction = (function(){var a = ReversibleAction; function b(c){a.call(this); this.tween = c; this.tween.eventCallback("onComplete", $.proxy(this.onTweenComplete, this)); this.tween.eventCallback("onReverseComplete", $.proxy(this.onTweenComplete, this)); this.pendingCallback}b.prototype = {onTweenComplete:function(){if (this.pendingCallback){this.pendingCallback(); this.pendingCallback = null}}, doAction:function(c){this.pendingCallback = c; this.tween.play()}, undoAction:function(c){this.pendingCallback = c; this.tween.reverse()}}; ClassUtil.extend(b, a); return b}()); var ObjectMapper = (function(){function a(){}a.prototype = {toJSON:function(c){if (ValueUtil.isUndefined(c)){return undefined}var f, e; if (Array.isArray(c)){f = []; for (var d = 0, b = c.length; d < b; ++d){e = this.toJSON(c[d]); f.push(e)}return f}if ((typeof c) === "object"){e = c.toJSON(); return e}return c}, fromJSON:function(f){if (ValueUtil.isUndefined(f)){return undefined}var h, d, c, g; if (Array.isArray(f)){h = []; for (var e = 0, b = d.length; e < b; ++e){d = this.fromJSON(f[e]); h.push(d)}return h}if ((typeof f) === "object"){c = f.clazz; g = window[c]; d = new g(); d.fromJSON(f); return d}return f}}; return new a()}()); var Serializable = (function(){function a(){this._clazz}a.prototype = {getClazz:function(){return this._clazz}, toJSON:function(){var b; b = {}; b.clazz = this.getClazz(); return b}, fromJSON:function(b){}, clone:function(){var b = ObjectMapper.toJSON(this); return ObjectMapper.fromJSON(b)}}; ClassUtil.defineGetter(a, "clazz"); return a}()); var Point = (function(){var a = Serializable; function b(c, d){a.call(this); this._clazz = "Point"; this._x = c || 0; this._y = d || 0}b.prototype = {getX:function(){return this._x}, setX:function(c){this._x = c}, getY:function(){return this._y}, setY:function(c){this._y = c}, toJSON:function(){var c; c = a.prototype.toJSON.call(this); c.x = this.x; c.y = this.y; return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.x = c.x; this.y = c.y}, distanceToPoint:function(c){var e, d, f; e = c.x - this.x; d = c.y - this.y; f = Math.sqrt((e * e) + (d * d)); return f}, distanceToSegment:function(g){var f, i, h, e, d, c, n, l, k, j, m; f = g.length; if (f === 0){return this.distanceToPoint(g.start)}i = g.start.x; h = g.start.y; e = g.end.x; d = g.end.y; c = this.x; n = this.y; l = e - i; k = d - h; j = Math.abs((k * c) - (l * n) + (e * h) - (d * i)); m = j / f; return m}}; ClassUtil.defineGetterAndSetter(b, "x"); ClassUtil.defineGetterAndSetter(b, "y"); ClassUtil.extend(b, a); return b}()); var CubicPoint = (function(){var b = Point; function a(c, f, e, d){b.call(this, c, f); this._clazz = "CubicPoint"; this._control1 = e || new Point(this.x, this.y); this._control2 = d || new Point(this.x, this.y)}a.prototype = {getControl1:function(){return this._control1}, setControl1:function(c){this._control1 = c}, getControl2:function(){return this._control2}, setControl2:function(c){this._control2 = c}}; ClassUtil.defineGetterAndSetter(a, "control1"); ClassUtil.defineGetterAndSetter(a, "control2"); ClassUtil.extend(a, b); return a}()); var Segment = (function(){var a = Serializable; function b(d, c){a.call(this); this._clazz = "Segment"; this._start = d || new Point(); this._end = c || new Point()}b.prototype = {getStart:function(){return this._start}, setStart:function(c){this._start = c}, getEnd:function(){return this._end}, setEnd:function(c){return this._end = c}, toJSON:function(){var c; c = a.prototype.toJSON.call(this); c.start = ObjectMapper.toJSON(this.start); c.end = ObjectMapper.toJSON(this.end); return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.start = ObjectMapper.fromJSON(c.start); this.end = ObjectMapper.fromJSON(c.end)}, getLength:function(){return this.start.distanceToPoint(this.end)}}; ClassUtil.defineGetterAndSetter(b, "start"); ClassUtil.defineGetterAndSetter(b, "end"); ClassUtil.defineGetter(b, "length"); ClassUtil.extend(b, a); return b}()); var Boundary = (function(){function a(){this._xMin; this._xMax; this._yMin; this._yMax; this._ready = false}a.prototype = {getXMin:function(){return this._xMin}, setXMin:function(b){this._xMin = b}, getXMax:function(){return this._xMax}, setXMax:function(b){this._xMax = b}, getYMin:function(){return this._yMin}, setYMin:function(b){this._yMin = b}, getYMax:function(){return this._yMax}, setYMax:function(b){this._yMax = b}, getReady:function(){return this._ready}, setReady:function(b){this._ready = b}, getWidth:function(){return this._xMax - this._xMin}, getHeight:function(){return this._yMax - this._yMin}, addPoint:function(c, f){var i, g, d, h, b, e; f = f || 0; i = c.x; g = c.y; d = i - f; h = i + f; b = g - f; e = g + f; if (!this.ready){this.xMin = d; this.xMax = h; this.yMin = b; this.yMax = e; this.ready = true} else{if (d < this.xMin){this.xMin = d}if (h > this.xMax){this.xMax = h}if (b < this.yMin){this.yMin = b}if (e > this.yMax){this.yMax = e}}}, contains:function(c){if (!this.ready){return false}var f, b, d, e; f = c.x; b = this.xMin <= f && f <= this.xMax; if (!b){return false}d = c.y; e = this.yMin <= d && d <= this.yMax; return e}}; ClassUtil.defineGetterAndSetter(a, "xMin"); ClassUtil.defineGetterAndSetter(a, "xMax"); ClassUtil.defineGetterAndSetter(a, "yMin"); ClassUtil.defineGetterAndSetter(a, "yMax"); ClassUtil.defineGetterAndSetter(a, "ready"); ClassUtil.defineGetter(a, "width"); ClassUtil.defineGetter(a, "height"); return a}()); var PathSimplifier = (function(){function a(c, b){this.orgPoints = c; b = b || {}; this.error = b.error || 10; this.closed = b.closed || false; this.numPoints; this.eliminated}a.prototype = {simplify:function(){var b; this.clonePoints(); if (this.closed){this.points.push(this.points[0].clone())}b = this.ramerDouglasPeucker(); if (this.closed){b.pop()}return b}, clonePoints:function(){this.points = []; for (var c = 0, b = this.orgPoints.length; c < b; ++c){this.points.push(this.orgPoints[c].clone())}}, ramerDouglasPeucker:function(){var c; this.numPoints = this.points.length; this.eliminated = []; for (var b = 0; b < this.numPoints; ++b){this.eliminated[b] = false}this.ramerDouglasPeuckerRecurse(0, this.numPoints - 1); c = []; for (var b = 0; b < this.numPoints; ++b){if (!this.eliminated[b]){c.push(this.points[b])}}return c}, ramerDouglasPeuckerRecurse:function(h, g){if ((h + 1) >= g){return}var d, e, c, f; d = new Segment(this.points[h], this.points[g]); e = - 1; c = - 1; for (var b = h + 1; b < g; ++b){f = this.points[b].distanceToSegment(d); if (f > e){e = f; c = b}}if (e < this.error){for (var b = h + 1; b < g; ++b){this.eliminated[b] = true}} else{this.ramerDouglasPeuckerRecurse(h, c); this.ramerDouglasPeuckerRecurse(c, g)}}}; return a}()); var PathSmoother = (function(){function a(c, b){this.points = this.flatten(c); b = b || {}; this.tension = b.tension || 0.5; this.numSegments = b.numSegments || 25; this.closed = b.closed || false; this.pts; this.rPos; this.rLen; this.res; this.cache}a.prototype = {flatten:function(e){var f; f = []; for (var d = 0, c = e.length; d < c; ++d){var b = e[d]; f.push(b.getX()); f.push(b.getY())}return f}, unflatten:function(e){var d; d = []; for (var c = 0, b = e.length; c < b; c += 2){d.push(new Point(e[c], e[c + 1]))}return d}, smooth:function(){var c, f, d, h, g, j, b; c = this.points.length; if (c < 6){return this.unflatten(this.points)}this.pts = this.points.slice(0); this.rPos = 0; this.rLen = (c - 2) * this.numSegments + 2 + (this.closed?2 * this.numSegments:0); this.res = new Float32Array(this.rLen); this.cache = new Float32Array((this.numSegments + 2) << 2); f = 4; if (this.closed){this.pts.unshift(this.points[c - 1]); this.pts.unshift(this.points[c - 2]); this.pts.push(this.points[0], this.points[1])} else{this.pts.unshift(this.points[1]); this.pts.unshift(this.points[0]); this.pts.push(this.points[c - 2], this.points[c - 1])}this.cache[0] = 1; for (var e = 1; e < this.numSegments; e++){d = e / this.numSegments; h = d * d; g = h * d; j = g * 2; b = h * 3; this.cache[f++] = j - b + 1; this.cache[f++] = b - j; this.cache[f++] = g - 2 * h + d; this.cache[f++] = g - h}this.cache[++f] = 1; this.parse(c); if (this.closed){this.pts = []; this.pts.push(this.points[c - 4], this.points[c - 3], this.points[c - 2], this.points[c - 1], this.points[0], this.points[1], this.points[2], this.points[3]); this.parse(4)}c = this.closed?0:this.points.length - 2; this.res[this.rPos++] = this.points[c++]; this.res[this.rPos] = this.points[c]; return this.unflatten(this.res)}, parse:function(d){var q, p, o, n, u, r, k, j, m, h, f, e, b; for (var g = 2; g < d; g += 2){q = this.pts[g]; p = this.pts[g + 1]; o = this.pts[g + 2]; n = this.pts[g + 3]; u = (o - this.pts[g - 2]) * this.tension; r = (n - this.pts[g - 1]) * this.tension; k = (this.pts[g + 4] - q) * this.tension; j = (this.pts[g + 5] - p) * this.tension; m = 0; for (var s = 0; s < this.numSegments; ++s){h = this.cache[m++]; f = this.cache[m++]; e = this.cache[m++]; b = this.cache[m++]; this.res[this.rPos++] = h * q + f * o + e * u + b * k; this.res[this.rPos++] = h * p + f * n + e * r + b * j}}}}; return a}()); var LessonPage = (function(){function a(b){this.$container = b; this.width; this.height; this.$lessonLayer; this.lessonObjects = []; this.$drawingLayer; this.drawingObjects = []; this.$eventLayer; this.grid}a.prototype = {initialize:function(){this.width = this.$container.width(); this.height = this.$container.height(); this.$lessonLayer = $("<div/>"); this.$lessonLayer.addClass("layer lesson_layer"); this.$drawingLayer = $("<div/>"); this.$drawingLayer.addClass("layer drawing_layer"); this.$eventLayer = $("<div/>"); this.$eventLayer.addClass("layer event_layer"); this.$container.append(this.$lessonLayer); this.$container.append(this.$drawingLayer); this.$container.append(this.$eventLayer); this.hideEventLayer()}, getWidth:function(){return this.width}, getHeight:function(){return this.height}, getEventLayer:function(){return this.$eventLayer}, showEventLayer:function(){this.$eventLayer.show()}, hideEventLayer:function(){this.$eventLayer.hide()}, getGrid:function(){return this.grid}, setGrid:function(b){if (this.grid){this.grid.detach()}this.grid = b; if (this.grid){this.grid.attachTo(this.$drawingLayer)}}, snapPosition:function(b){if (this.grid){b = this.grid.snapPosition(b)}return b}, addDrawingObject:function(b){this.drawingObjects.push(b); this.$drawingLayer.append(b.getViewElement())}, removeDrawingObject:function(b){b.remove(); this.drawingObjects = _.without(this.drawingObjects, b)}, getDrawingObjectAt:function(e){var b, d; for (var c = this.drawingObjects.length - 1; c >= 0; --c){b = this.drawingObjects[c]; d = b.boundary; if (d.contains(e)){return b}}}, clearDrawingObjects:function(){for (var c = 0, b = this.drawingObjects.length; c < b; ++c){this.drawingObjects[c].remove()}this.drawingObjects = []}, cloneHtml:function(){var b; b = this.$container.clone(); b.attr("id", ""); b.addClass("container"); b.find("canvas").remove(); b.find(".event_layer").show(); return b}}; return a}()); var BaseObject = (function(){var b = Serializable; function a(){b.call(this); this._clazz = "BaseObject"; this._x = 0; this._y = 0; this._width = 0; this._height = 0; this._scaleX = 1; this._scaleY = 1; this._rotation = 0; this._strokeWidth = 0; this._strokeDashArray = []; this._strokeColor = "transparent"; this._fillColor = "transparent"; this._opacity = 1; this._view = {}; this.initializeViewElements()}a.prototype = {getX:function(){return this._x}, setX:function(c){this._x = c; this.viewElement.css("left", this.x + "px")}, getY:function(){return this._y}, setY:function(c){this._y = c; this.viewElement.css("top", this.y + "px")}, getWidth:function(){return this._width}, setWidth:function(c){this._width = c; this.viewElement.css("width", this.width + "px")}, getHeight:function(){return this._height}, setHeight:function(c){this._height = c; this.viewElement.css("height", this.height + "px")}, getScaleX:function(){return this._scaleX}, setScaleX:function(c){this._scaleX = c}, getScaleY:function(){return this._scaleY}, setScaleY:function(c){this._scaleY = c}, getRotation:function(){return this._rotation}, setRotation:function(c){this._rotation = c}, getStrokeWidth:function(){return this._strokeWidth}, setStrokeWidth:function(c){this._strokeWidth = c}, getStrokeDashArray:function(){return this._strokeDashArray}, setStrokeDashArray:function(c){this._strokeDashArray = c}, getStrokeColor:function(){return this._strokeColor}, setStrokeColor:function(c){this._strokeColor = c}, getFillColor:function(){return this._fillColor}, setFillColor:function(c){this._fillColor = c}, getOpacity:function(){return this._opacity}, setOpacity:function(c){this._opacity = c; this.viewElement.css("opacity", this.opacity)}, initializeViewElements:function(){}, getViewElement:function(){}, remove:function(){this.viewElement.remove()}, getBoundary:function(){var c; c = new Boundary(); c.addPoint(new Point(this.x, this.y)); c.addPoint(new Point(this.x + this.width, this.y)); c.addPoint(new Point(this.x + this.width, this.y + this.height)); c.addPoint(new Point(this.x, this.y + this.height)); return c}, getMinimumBoundary:function(){return this.boundary}, hasStroke:function(){return !ValueUtil.isUndefined(this.strokeWidth) && this.strokeWidth > 0 && !ValueUtil.isUndefined(this.strokeColor) && this.strokeColor !== "none"}, hasFill:function(){return !ValueUtil.isUndefined(this.fillColor) && this.fillColor !== "none"}, toJSON:function(){var c; c = b.prototype.toJSON.call(this); c.x = this.x; c.y = this.y; c.width = this.width; c.height = this.height; c.scaleX = this.scaleX; c.scaleY = this.scaleY; c.rotation = this.rotation; c.strokeWidth = this.strokeWidth; c.strokeDashArray = this.strokeDashArray; c.strokeColor = this.strokeColor; c.fillColor = this.fillColor; c.opacity = this.opacity; return c}, fromJSON:function(c){b.prototype.fromJSON.call(this, c); this.x = c.x; this.y = c.y; this.width = c.width; this.height = c.height; this.scaleX = c.scaleX; this.scaleY = c.scaleY; this.rotation = c.rotation; this.strokeWidth = c.strokeWidth; this.strokeDashArray = c.strokeDashArray; this.strokeColor = c.strokeColor; this.fillColor = c.fillColor; this.opacity = c.opacity}}; ClassUtil.defineGetterAndSetter(a, "x"); ClassUtil.defineGetterAndSetter(a, "y"); ClassUtil.defineGetterAndSetter(a, "width"); ClassUtil.defineGetterAndSetter(a, "height"); ClassUtil.defineGetterAndSetter(a, "scaleX"); ClassUtil.defineGetterAndSetter(a, "scaleY"); ClassUtil.defineGetterAndSetter(a, "rotation"); ClassUtil.defineGetterAndSetter(a, "strokeWidth"); ClassUtil.defineGetterAndSetter(a, "strokeDashArray"); ClassUtil.defineGetterAndSetter(a, "strokeColor"); ClassUtil.defineGetterAndSetter(a, "fillColor"); ClassUtil.defineGetterAndSetter(a, "opacity"); ClassUtil.defineGetter(a, "viewElement"); ClassUtil.defineGetter(a, "boundary"); ClassUtil.defineGetter(a, "minimumBoundary"); ClassUtil.extend(a, b); return a}()); var SvgObject = (function(){var a = BaseObject; function b(){a.call(this); this._clazz = "SvgObject"}b.prototype = {createNewElement:function(e){var c, d; c = document.createElementNS("http://www.w3.org/2000/svg", e); d = $(c); return d}, setWidth:function(c){a.prototype.setWidth.call(this, c); this._view.svg.attr("width", this.width)}, setHeight:function(c){a.prototype.setHeight.call(this, c); this._view.svg.attr("height", this.height)}, getStrokeDashArray:function(){var g, d, f; g = this.strokeWidth; d = this._strokeDashArray; f = []; for (var e = 0, c = d.length; e < c; ++e){f.push(d[e] * g * ((e % 2) === 0?1:2))}return f.join(" ")}, initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.svg = this.createNewElement("svg")}, getViewElement:function(){return this._view.svg}, shiftContentBy:function(d, c){}, getMinimumBoundaryPadding:function(){return this.strokeWidth}, getMinimumBoundary:function(){var j, e, g, h, f; j = new Boundary(); e = this._view.svg.children(); g = this.minimumBoundaryPadding; for (var d = 0, c = e.length; d < c; ++d){h = e[d]; f = h.getBoundingClientRect(); if (!f.width && !f.height){continue}j.addPoint(new Point(Math.floor(f.left), Math.floor(f.top)), g); j.addPoint(new Point(Math.ceil(f.right), Math.ceil(f.bottom)), g)}return j}, expandToFullScreen:function(d, c){this.shiftContentBy(this.x, this.y); this.x = 0; this.y = 0; this.width = d; this.height = c}, cropToMinimumSize:function(){var h, e, d, g, f, k, j, c, i; h = this.minimumBoundary; e = this.x; d = this.y; g = h.xMin; f = h.yMin; k = g - e; j = f - d; c = h.width; i = h.height; this.shiftContentBy( - k, - j); this.x = g; this.y = f; this.width = c; this.height = i}, pointToString:function(c){return c.x + " " + c.y}}; ClassUtil.defineGetter(b, "minimumBoundaryPadding"); ClassUtil.extend(b, a); return b}()); var FreePathObject = (function(){var a = SvgObject; function b(){a.call(this); this._clazz = "FreePathObject"; this._points = null; this._closed = false; this._smooth = false; this._smoothTension = 0; this._smoothSegments = 0; this._smoothPoints = null}b.prototype = {getPoints:function(){return this._points}, setPoints:function(c){this._points = c; this.updatePathString()}, getClosed:function(){return this._closed}, setClosed:function(c){this._closed = c; this.updateFillOptions(); this.updatePathString()}, getSmooth:function(){return this._smooth && this._smoothTension && this._smoothSegments}, setSmooth:function(c){this._smooth = c; this.updatePathString()}, getSmoothTension:function(){return this._smoothTension}, setSmoothTension:function(c){this._smoothTension = c; this.updatePathString()}, getSmoothSegments:function(){return this._smoothSegments}, setSmoothSegments:function(c){this._smoothSegments = c; this.updatePathString()}, getSmoothPoints:function(){return this._smoothPoints}, setSmoothPoints:function(c){this._smoothPoints = c}, setStrokeWidth:function(c){a.prototype.setStrokeWidth.call(this, c); this._view.path.attr("stroke-width", this.strokeWidth)}, setStrokeDashArray:function(c){a.prototype.setStrokeDashArray.call(this, c); this._view.path.attr("stroke-dasharray", this.strokeDashArray)}, setStrokeColor:function(c){a.prototype.setStrokeColor.call(this, c); this._view.path.attr("stroke", this.strokeColor)}, setFillColor:function(c){a.prototype.setFillColor.call(this, c); this.updateFillOptions()}, initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.path = this.createNewElement("path"); this._view.svg.append(this._view.path); this._view.path.attr("stroke-linecap", "round"); this._view.path.attr("stroke-linejoin", "round")}, shiftContentBy:function(f, e){a.prototype.shiftContentBy.call(this, f, e); var h, c; h = this.points; if (!h || !h.length){return}for (var g = 0, d = h.length; g < d; ++g){c = h[g]; c.x += f; c.y += e}this.points = h}, toJSON:function(){var c; c = a.prototype.toJSON.call(this); c.points = this.points; c.closed = this.closed; c.smooth = this.smooth; c.smoothTension = this.smoothTension; c.smoothSegments = this.smoothSegments; return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.points = c.points; this.closed = c.closed; this.smooth = c.smooth; this.smoothTension = c.smoothTension; this.smoothSegments = c.smoothSegments}, generatePathString:function(g, e){var d; d = ""; if (!g || !g.length){return d}d += "M" + this.pointToString(g[0]); for (var f = 1, c = g.length; f < c; ++f){d += " L " + this.pointToString(g[f])}if (e){d += " Z"}return d}, setPathString:function(c){this._view.path.attr("d", c)}, updatePathString:function(){var c; c = this.points; if (this.smooth){this.smoothPoints = new PathSmoother(c, {tension:this.smoothTension, segments:this.smoothSegments, closed:this.closed}).smooth(); c = this.smoothPoints}this.pathString = this.generatePathString(c, this.closed)}, updateFillOptions:function(){if (this.closed){this._view.path.attr("fill", this.fillColor)} else{this._view.path.attr("fill", "transparent")}}}; ClassUtil.defineGetterAndSetter(b, "points"); ClassUtil.defineGetterAndSetter(b, "closed"); ClassUtil.defineGetterAndSetter(b, "smooth"); ClassUtil.defineGetterAndSetter(b, "smoothTension"); ClassUtil.defineGetterAndSetter(b, "smoothSegments"); ClassUtil.defineGetterAndSetter(b, "smoothPoints"); ClassUtil.defineSetter(b, "pathString"); ClassUtil.extend(b, a); return b}()); var PencilObject = (function(){var a = FreePathObject; function b(){a.call(this); this._clazz = "PencilObject"}b.prototype = {}; ClassUtil.extend(b, a); return b}()); var LineObject = (function(){var a = SvgObject; function b(){a.call(this); this._clazz = "LineObject"; this._start = new Point(); this._end = new Point()}b.prototype = {getStart:function(){return this._start}, setStart:function(c){this._start = c; this.updatePathString()}, getEnd:function(){return this._end}, setEnd:function(c){this._end = c; this.updatePathString()}, setStrokeWidth:function(c){a.prototype.setStrokeWidth.call(this, c); this._view.path.attr("stroke-width", this.strokeWidth)}, setStrokeDashArray:function(c){a.prototype.setStrokeDashArray.call(this, c); this._view.path.attr("stroke-dasharray", this.strokeDashArray)}, setStrokeColor:function(c){a.prototype.setStrokeColor.call(this, c); this._view.path.attr("stroke", this.strokeColor)}, getFillColor:function(){return"transparent"}, setFillColor:function(c){a.prototype.setFillColor.call(this, this.fillColor)}, setPathString:function(c){this._view.path.attr("d", c)}, updatePathString:function(){var c; c = "M" + this.start.x + " " + this.start.y + " L" + this.end.x + " " + this.end.y; this.pathString = c}, initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.path = this.createNewElement("path"); this._view.svg.append(this._view.path); this._view.path.attr("stroke-linecap", "round"); this._view.path.attr("fill", this.fillColor)}, shiftContentBy:function(e, d){a.prototype.shiftContentBy.call(this, e, d); var f, c; f = this.start; c = this.end; f.x += e; f.y += d; c.x += e; c.y += d; this.start = f; this.end = c}, toJSON:function(){var c; c = a.prototype.toJSON.call(this); c.start = ObjectMapper.toJSON(this.start); c.end = ObjectMapper.toJSON(this.end); return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.start = ObjectMapper.fromJSON(c.start); this.end = ObjectMapper.fromJSON(c.end)}}; ClassUtil.defineGetterAndSetter(b, "start"); ClassUtil.defineGetterAndSetter(b, "end"); ClassUtil.defineSetter(b, "pathString"); ClassUtil.extend(b, a); return b}()); var MarkerObject = (function(){var b = LineObject; function a(){b.call(this); this._clazz = "MarkerObject"}a.prototype = {getStrokeWidth:function(){return 32}, setStrokeWidth:function(c){b.prototype.setStrokeWidth.call(this, this.strokeWidth)}, getOpacity:function(){return 0.4}, setOpacity:function(c){b.prototype.setOpacity.call(this, this.opacity)}, initializeViewElements:function(){b.prototype.initializeViewElements.call(this); b.prototype.setStrokeWidth.call(this, this.strokeWidth); b.prototype.setOpacity.call(this, this.opacity)}}; ClassUtil.extend(a, b); return a}()); var ArrowObject = (function(){var a = LineObject; function b(){a.call(this); this._clazz = "ArrowObject"; this._arrowAngle = 45; this._arrowLength = 20; this._arrow1 = new Point(); this._arrow2 = new Point(); this._hasArrow = false}b.prototype = {getArrowAngle:function(){return this._arrowAngle}, setArrowAngle:function(c){this._arrowAngle = c; this.updateArrowPositions()}, getArrowLength:function(){return this._arrowLength}, setArrowLength:function(c){this._arrowLength = c; this.updateArrowPositions()}, getArrow1:function(){return this._arrow1}, setArrow1:function(c){this._arrow1 = c}, getArrow2:function(){return this._arrow2}, setArrow2:function(c){this._arrow2 = c}, getHasArrow:function(){return this._hasArrow}, setHasArrow:function(c){this._hasArrow = c; this.updateArrowPathString()}, setEnd:function(c){a.prototype.setEnd.call(this, c); this.updateArrowPositions()}, setStrokeWidth:function(c){a.prototype.setStrokeWidth.call(this, c); this._view.arrowPath.attr("stroke-width", this.strokeWidth); this.arrowLength = this.strokeWidth * 5}, setStrokeColor:function(c){a.prototype.setStrokeColor.call(this, c); this._view.arrowPath.attr("stroke", this.strokeColor)}, initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.arrowPath = this.createNewElement("path"); this._view.svg.append(this._view.arrowPath); this._view.arrowPath.attr("stroke-linecap", "round"); this._view.arrowPath.attr("fill", this.fillColor)}, setArrowPathString:function(c){this._view.arrowPath.attr("d", c)}, updateArrowPositions:function(){var d, c, e; d = new Victor(this.start.x - this.end.x, this.start.y - this.end.y); c = d.length(); if (c < 1){this.hasArrow = false; return}d.normalize(); e = Math.min(this.arrowLength, c); d.multiply(new Victor(e, e)); d.rotateDeg( - this.arrowAngle); this.arrow1.x = this.end.x + d.x; this.arrow1.y = this.end.y + d.y; d.rotateDeg(2 * this.arrowAngle); this.arrow2.x = this.end.x + d.x; this.arrow2.y = this.end.y + d.y; this.hasArrow = true}, updateArrowPathString:function(){var c; if (!this.hasArrow){c = ""} else{c = "M" + this.arrow1.x + " " + this.arrow1.y + " L" + this.end.x + " " + this.end.y + " L" + this.arrow2.x + " " + this.arrow2.y}this.arrowPathString = c}, shiftContentBy:function(d, c){a.prototype.shiftContentBy.call(this, d, c); this.updateArrowPositions()}, toJSON:function(){var c; c = a.prototype.toJSON.call(this); c.arrowAngle = this.arrowAngle; c.arrowLength = this.arrowLength; return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.arrowAngle = c.arrowAngle; this.arrowLength = c.arrowLength}}; ClassUtil.defineGetterAndSetter(b, "arrowAngle"); ClassUtil.defineGetterAndSetter(b, "arrowLength"); ClassUtil.defineGetterAndSetter(b, "arrow1"); ClassUtil.defineGetterAndSetter(b, "arrow2"); ClassUtil.defineGetterAndSetter(b, "hasArrow"); ClassUtil.defineSetter(b, "arrowPathString"); ClassUtil.extend(b, a); return b}()); var TriangleObject = (function(){var a = SvgObject; function b(){a.call(this); this._clazz = "TriangleObject"; this._p1 = new Point(); this._p2 = new Point(); this._p3 = new Point()}b.prototype = {getP1:function(){return this._p1}, setP1:function(c){this._p1 = c; this.updatePathString()}, getP2:function(){return this._p2}, setP2:function(c){this._p2 = c; this.updatePathString()}, getP3:function(){return this._p3}, setP3:function(c){this._p3 = c; this.updatePathString()}, setPathString:function(c){this._view.path.attr("d", c)}, setStrokeWidth:function(c){a.prototype.setStrokeWidth.call(this, c); this._view.path.attr("stroke-width", this.strokeWidth)}, setStrokeDashArray:function(c){a.prototype.setStrokeDashArray.call(this, c); this._view.path.attr("stroke-dasharray", this.strokeDashArray)}, setStrokeColor:function(c){a.prototype.setStrokeColor.call(this, c); this._view.path.attr("stroke", this.strokeColor)}, setFillColor:function(c){a.prototype.setFillColor.call(this, c); this._view.path.attr("fill", this.fillColor)}, initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.path = this.createNewElement("path"); this._view.path.attr("stroke-linecap", "round"); this._view.path.attr("stroke-linejoin", "round"); this._view.svg.append(this._view.path)}, updatePathString:function(){var c; c = "M" + this.p1.x + " " + this.p1.y + " L" + this.p2.x + " " + this.p2.y; if (this.p2.x !== this.p3.x || this.p2.y !== this.p3.y){c += " L" + this.p3.x + " " + this.p3.y + " Z"}this.pathString = c}, shiftContentBy:function(d, c){a.prototype.shiftContentBy.call(this, d, c); var g, f, e; g = this.p1; f = this.p2; e = this.p3; g.x += d; g.y += c; f.x += d; f.y += c; e.x += d; e.y += c; this.p1 = g; this.p2 = f; this.p3 = e}, toJSON:function(){var c = a.prototype.toJSON.call(this); c.p1 = ObjectMapper.toJSON(this.p1); c.p2 = ObjectMapper.toJSON(this.p2); c.p3 = ObjectMapper.toJSON(this.p3); return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.p1 = ObjectMapper.fromJSON(this.p1); this.p2 = ObjectMapper.fromJSON(this.p2); this.p3 = ObjectMapper.fromJSON(this.p3)}}; ClassUtil.defineGetterAndSetter(b, "p1"); ClassUtil.defineGetterAndSetter(b, "p2"); ClassUtil.defineGetterAndSetter(b, "p3"); ClassUtil.defineSetter(b, "pathString"); ClassUtil.extend(b, a); return b}()); var RectangleObject = (function(){var a = SvgObject; function b(){a.call(this); this._clazz = "RectangleObject"; this._start = new Point(); this._end = new Point()}b.prototype = {getStart:function(){return this._start}, setStart:function(c){this._start = c; this.updateRectangleCoordinates()}, getEnd:function(){return this._end}, setEnd:function(c){this._end = c; this.updateRectangleCoordinates()}, setStrokeWidth:function(c){a.prototype.setStrokeWidth.call(this, c); this._view.rect.attr("stroke-width", this.strokeWidth)}, setStrokeDashArray:function(c){a.prototype.setStrokeDashArray.call(this, c); this._view.rect.attr("stroke-dasharray", this.strokeDashArray)}, setStrokeColor:function(c){a.prototype.setStrokeColor.call(this, c); this._view.rect.attr("stroke", this.strokeColor)}, setFillColor:function(c){a.prototype.setFillColor.call(this, c); this._view.rect.attr("fill", this.fillColor)}, initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.rect = this.createNewElement("rect"); this._view.rect.attr("stroke-linecap", "round"); this._view.rect.attr("stroke-linejoin", "round"); this._view.svg.append(this._view.rect)}, updateRectangleCoordinates:function(){var d, f, e, c; d = Math.min(this.start.x, this.end.x); f = Math.min(this.start.y, this.end.y); e = Math.abs(this.end.x - this.start.x); c = Math.abs(this.end.y - this.start.y); this._view.rect.attr("x", d); this._view.rect.attr("y", f); this._view.rect.attr("width", e); this._view.rect.attr("height", c)}, shiftContentBy:function(e, d){a.prototype.shiftContentBy.call(this, e, d); var f, c; f = this.start; c = this.end; f.x += e; f.y += d; c.x += e; c.y += d; this.start = f; this.end = c}, toJSON:function(){var c; c = a.prototype.toJSON.call(this); c.start = ObjectMapper.toJSON(this.start); c.end = ObjectMapper.toJSON(this.end); return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.start = ObjectMapper.fromJSON(c.start); this.end = ObjectMapper.fromJSON(c.end)}}; ClassUtil.defineGetterAndSetter(b, "start"); ClassUtil.defineGetterAndSetter(b, "end"); ClassUtil.extend(b, a); return b}()); var CircleObject = (function(){var a = SvgObject; function b(){a.call(this); this._clazz = "CircleObject"; this._center = new Point(); this._radius = 0}b.prototype = {getCenter:function(){return this._center}, setCenter:function(c){this._center = c; this._view.circle.attr("cx", this.center.x); this._view.circle.attr("cy", this.center.y)}, getRadius:function(){return this._radius}, setRadius:function(c){this._radius = c; this._view.circle.attr("r", this.radius)}, setStrokeWidth:function(c){a.prototype.setStrokeWidth.call(this, c); this._view.circle.attr("stroke-width", this.strokeWidth)}, setStrokeDashArray:function(c){a.prototype.setStrokeDashArray.call(this, c); this._view.circle.attr("stroke-dasharray", this.strokeDashArray)}, setStrokeColor:function(c){a.prototype.setStrokeColor.call(this, c); this._view.circle.attr("stroke", this.strokeColor)}, setFillColor:function(c){a.prototype.setFillColor.call(this, c); this._view.circle.attr("fill", this.fillColor)}, initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.circle = this.createNewElement("circle"); this._view.circle.attr("stroke-linecap", "round"); this._view.svg.append(this._view.circle)}, shiftContentBy:function(e, d){a.prototype.shiftContentBy.call(this, e, d); var c; c = this.center; c.x += e; c.y += d; this.center = c}, toJSON:function(){var c; c = a.prototype.toJSON.call(this); c.center = ObjectMapper.toJSON(this.center); c.radius = this.radius; return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.center = ObjectMapper.fromJSON(c.center); this.radius = c.radius}}; ClassUtil.defineGetterAndSetter(b, "center"); ClassUtil.defineGetterAndSetter(b, "radius"); ClassUtil.extend(b, a); return b}()); var PolylineObject = (function(){var a = SvgObject; function b(){a.call(this); this._clazz = "PolylineObject"; this._points = null; this._closed = false; this._showJoinIndicators = false}b.prototype = {getPoints:function(){return this._points}, setPoints:function(c){this._points = c; this.updatePathString(); this.updateJoinIndicators()}, getClosed:function(){return this._closed}, setClosed:function(c){this._closed = c; this.updateFillOptions(); this.updatePathString()}, getShowJoinIndicators:function(){return this._showJoinIndicators}, setShowJoinIndicators:function(c){this._showJoinIndicators = c; this.updateJoinIndicators()}, setStrokeWidth:function(e){a.prototype.setStrokeWidth.call(this, e); this._view.path.attr("stroke-width", this.strokeWidth); for (var d = 0, c = this._view.joinIndicators.length; d < c; ++d){this._view.joinIndicators[d].attr("r", this.strokeWidth * 2)}}, setStrokeDashArray:function(c){a.prototype.setStrokeDashArray.call(this, c); this._view.path.attr("stroke-dasharray", this.strokeDashArray)}, setStrokeColor:function(e){a.prototype.setStrokeColor.call(this, e); this._view.path.attr("stroke", this.strokeColor); for (var d = 0, c = this._view.joinIndicators.length; d < c; ++d){this._view.joinIndicators[d].attr("fill", this.strokeColor)}}, setFillColor:function(c){a.prototype.setFillColor.call(this, c); this.updateFillOptions()}, setPathString:function(c){this._view.path.attr("d", c)}, initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.path = this.createNewElement("path"); this._view.path.attr("stroke-linecap", "round"); this._view.path.attr("stroke-linejoin", "round"); this._view.joinIndicators = []; this._view.svg.append(this._view.path)}, shiftContentBy:function(d, c){a.prototype.shiftContentBy.call(this, d, c); this.points = this.shiftPoints(this.points, d, c)}, shiftPoints:function(h, f, e){if (!h || !h.length){return null}for (var g = 0, d = h.length; g < d; ++g){var c = h[g]; c.x += f; c.y += e}return h}, generatePathString:function(h, f){if (!h || !h.length){return""}var e = "M" + h[0].x + " " + h[0].y; for (var g = 1, d = h.length; g < d; ++g){var c = h[g]; e += " L" + c.x + " " + c.y}if (f){e += " Z"}return e}, updateFillOptions:function(){if (this.closed){this._view.path.attr("fill", this.fillColor)} else{this._view.path.attr("fill", "transparent")}}, updatePathString:function(){var c = this.generatePathString(this.points, this.closed); this.pathString = c}, updateJoinIndicators:function(){var f, e, g; f = this.points; e = f?f.length:0; if (!this.showJoinIndicators || e < 1){for (var d = 0, c = this._view.joinIndicators.length; d < c; ++d){this._view.joinIndicators[d].remove()}this._view.joinIndicators = []; return}while (this._view.joinIndicators.length < e){g = this.createNewElement("circle"); g.attr("fill", this.strokeColor); g.attr("r", this.strokeWidth * 2); this._view.svg.append(g); this._view.joinIndicators.push(g)}while (this._view.joinIndicators.length > e){this._view.joinIndicators.pop().remove()}for (var d = 0; d < e; ++d){this._view.joinIndicators[d].attr("cx", f[d].x); this._view.joinIndicators[d].attr("cy", f[d].y)}}, toJSON:function(){var c; c = a.prototype.toJSON.call(this); c.points = ObjectMapper.toJSON(this.points); return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.points = ObjectMapper.fromJSON(c.points)}}; ClassUtil.defineGetterAndSetter(b, "points"); ClassUtil.defineGetterAndSetter(b, "closed"); ClassUtil.defineGetterAndSetter(b, "showJoinIndicators"); ClassUtil.defineSetter(b, "pathString"); ClassUtil.extend(b, a); return b}()); var MediaObject = (function(){var b = BaseObject; function a(){b.call(this); this._clazz = "MediaObject"; this._source = null}a.prototype = {getSource:function(){return this._source}, setSource:function(c){this._source = c}, toJSON:function(){var c; c = b.prototype.toJSON.call(this); c.source = this.source; return c}, fromJSON:function(c){b.prototype.fromJSON.call(this, c); this.source = c.source}}; ClassUtil.defineGetterAndSetter(a, "source"); ClassUtil.extend(a, b); return a}()); var ImageObject = (function(){var a = MediaObject; function b(){a.call(this); this._clazz = "ImageObject"}b.prototype = {initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.img = $("<img/>")}, getViewElement:function(){return this._view.img}}; ClassUtil.extend(b, a); return b}()); var SoundObject = (function(){var b = MediaObject; function a(){b.call(this); this._clazz = "SoundObject"}a.prototype = {}; ClassUtil.extend(a, b); return a}()); var VideoObject = (function(){var a = MediaObject; function b(){a.call(this); this._clazz = "VideoObject"}b.prototype = {initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.video = $("<video/>")}, getViewElement:function(){return this._view.video}}; ClassUtil.extend(b, a); return b}()); var TextObject = (function(){var a = BaseObject; function b(){a.call(this); this._clazz = "TextObject"; this._html = ""}b.prototype = {getHtml:function(){return this._html}, setHtml:function(c){this._html = c; this._view.div.html(this.html)}, initializeViewElements:function(){a.prototype.initializeViewElements.call(this); this._view.div = $("<div/>")}, getViewElement:function(){return this._view.div}, toJSON:function(){var c; c = a.prototype.toJSON.call(this); c.html = this.html; return c}, fromJSON:function(c){a.prototype.fromJSON.call(this, c); this.html = c.html}}; ClassUtil.defineGetterAndSetter(b, "html"); ClassUtil.extend(b, a); return b}()); var BaseTool = (function(){function a(){this.controller; this.lessonPage}a.prototype = {initialize:function(){}, engage:function(){}, disengage:function(){}}; return a}()); var BaseDrawingTool = (function(){var a = BaseTool; function b(){a.call(this); this.eventTracker}b.prototype = {initialize:function(){a.prototype.initialize.call(this); this.eventTracker = new EventTracker(this.lessonPage.getEventLayer(), this.getEventTrackerOptions()); this.eventTracker.initialize()}, getEventTrackerOptions:function(){var c; c = {}; c.endDelay = UserPreferences.eventEndDelay; c.maxPipeCount = UserPreferences.maxEventPipeCount; c.onStart = $.proxy(this.onEventStart, this); c.onMove = $.proxy(this.onEventMove, this); c.onEnd = $.proxy(this.onEventEnd, this); return c}, engage:function(){a.prototype.engage.call(this); this.lessonPage.showEventLayer(); this.eventTracker.attach()}, disengage:function(){a.prototype.disengage.call(this); this.eventTracker.detach(); this.lessonPage.hideEventLayer()}, setObjectDrawingChoices:function(c){c.strokeWidth = this.controller.getDrawingChoice("stroke_width"); c.strokeColor = this.controller.getDrawingChoice("stroke_color"); c.strokeDashArray = this.controller.getDrawingChoice("stroke_dash_array"); c.fillColor = this.controller.getDrawingChoice("fill_color"); c.opacity = this.controller.getDrawingChoice("opacity")}, addObjectAddRemoveAction:function(c){var d; d = new SimpleReversibleAction($.proxy(function(){this.lessonPage.addDrawingObject(c)}, this), $.proxy(function(){this.lessonPage.removeDrawingObject(c)}, this)); this.controller.addNewAction(d)}, setDrawingChoice:function(c, d){}, onEventStart:function(d, c){}, onEventMove:function(d, c){}, onEventEnd:function(d, c){}}; ClassUtil.extend(b, a); return b}()); var SingleStrokeDrawingTool = (function(){var a = BaseDrawingTool; function b(c){a.call(this); this.objectClass = c; this.trackedObjects = {}}b.prototype = {getTrackedObject:function(c){return this.trackedObjects[c]}, trackObject:function(d, c){this.trackedObjects[d] = c}, untrackObject:function(c){this.trackedObjects[c] = null}, crateNewObject:function(){return new this.objectClass()}, onEventStart:function(e, d){a.prototype.onEventStart.call(this, e, d); var c; c = this.crateNewObject(); this.setObjectDrawingChoices(c); this.lessonPage.addDrawingObject(c); this.trackObject(d, c); this.onObjectStart(e, c)}, onEventMove:function(e, d){a.prototype.onEventMove.call(this, e, d); var c; c = this.trackedObjects[d]; this.onObjectMove(e, c)}, onEventEnd:function(e, d){a.prototype.onEventEnd.call(this, e, d); var c; c = this.getTrackedObject(d); this.onObjectEnd(e, c); this.untrackObject(d)}, onObjectStart:function(d, c){}, onObjectMove:function(d, c){}, onObjectEnd:function(d, c){}}; ClassUtil.extend(b, a); return b}()); var FreeDrawingTool = (function(){var a = SingleStrokeDrawingTool; function b(c){a.call(this, c)}b.prototype = {onObjectStart:function(d, c){a.prototype.onObjectStart.call(this, d, c); c.expandToFullScreen(this.lessonPage.getWidth(), this.lessonPage.getHeight()); c.points = [d.clone()]}, onObjectMove:function(e, c){a.prototype.onObjectMove.call(this, e, c); var d; d = c.points; d.push(e.clone()); c.points = d}, onObjectEnd:function(f, d){a.prototype.onObjectEnd.call(this, f, d); var e, c; e = d.points; c = false; if (UserPreferences.freeDrawConnectThreshold){if (e[0].distanceToPoint(f) < UserPreferences.freeDrawConnectThreshold){c = true}}if (!c){e.push(f.clone())}if (UserPreferences.freeDrawSimplifyError){e = new PathSimplifier(e, {error:UserPreferences.freeDrawSimplifyError, closed:c}).simplify()}d.points = e; d.closed = c; d.smooth = true; d.smoothTension = UserPreferences.freeDrawSmoothTension; d.smoothSegments = UserPreferences.freeDrawSmoothSegments; d.cropToMinimumSize(); this.addObjectAddRemoveAction(d)}}; ClassUtil.extend(b, a); return b}()); var LineDrawingTool = (function(){var b = SingleStrokeDrawingTool; function a(c){b.call(this, c)}a.prototype = {onObjectStart:function(d, c){d = this.lessonPage.snapPosition(d); b.prototype.onObjectStart.call(this, d, c); c.expandToFullScreen(this.lessonPage.getWidth(), this.lessonPage.getHeight()); c.start = d.clone(); c.end = d.clone()}, onObjectMove:function(d, c){d = this.lessonPage.snapPosition(d); b.prototype.onObjectMove.call(this, d, c); c.end = d.clone()}, onObjectEnd:function(d, c){d = this.lessonPage.snapPosition(d); b.prototype.onObjectEnd.call(this, d, c); c.end = d.clone(); c.cropToMinimumSize(); this.addObjectAddRemoveAction(c)}}; ClassUtil.extend(a, b); return a}()); var RectangleDrawingTool = (function(){var a = SingleStrokeDrawingTool; function b(c){a.call(this, c)}b.prototype = {onObjectStart:function(d, c){d = this.lessonPage.snapPosition(d); a.prototype.onObjectStart.call(this, d, c); c.expandToFullScreen(this.lessonPage.getWidth(), this.lessonPage.getHeight()); c.start = d.clone(); c.end = d.clone()}, onObjectMove:function(d, c){d = this.lessonPage.snapPosition(d); a.prototype.onObjectMove.call(this, d, c); c.end = d.clone()}, onObjectEnd:function(d, c){d = this.lessonPage.snapPosition(d); a.prototype.onObjectEnd.call(this, d, c); c.end = d.clone(); if (Math.abs(c.end.x - c.start.x) < UserPreferences.minimumLineLength || Math.abs(c.end.y - c.start.y) < UserPreferences.minimumLineLength){this.lessonPage.removeDrawingObject(c)} else{c.cropToMinimumSize(); this.addObjectAddRemoveAction(c)}}}; ClassUtil.extend(b, a); return b}()); var CircleDrawingTool = (function(){var a = SingleStrokeDrawingTool; function b(c){a.call(this, c)}b.prototype = {onObjectStart:function(d, c){d = this.lessonPage.snapPosition(d); a.prototype.onObjectStart.call(this, d, c); c.expandToFullScreen(this.lessonPage.getWidth(), this.lessonPage.getHeight()); c.center = d.clone()}, onObjectMove:function(e, d){a.prototype.onObjectMove.call(this, e, d); var c; c = e.distanceToPoint(d.center); d.radius = c}, onObjectEnd:function(e, d){a.prototype.onObjectEnd.call(this, e, d); var c; c = e.distanceToPoint(d.center); if (c < UserPreferences.minimumLineLength){this.lessonPage.removeDrawingObject(d)} else{d.radius = c; d.cropToMinimumSize(); this.addObjectAddRemoveAction(d)}}}; ClassUtil.extend(b, a); return b}()); var MultipleStrokeDrawingTool = (function(){var a = BaseDrawingTool; function b(c){a.call(this); this.objectClass = c; this.currentObject = null}b.prototype = {getEventTrackerOptions:function(){var c; c = a.prototype.getEventTrackerOptions.call(this); c.maxPipeCount = 1; return c}, crateNewObject:function(){return new this.objectClass()}, setDrawingChoice:function(c, d){a.prototype.setDrawingChoice.call(this, c, d); if (this.currentObject){switch (c){case"stroke_width":this.currentObject.strokeWidth = d; break; case"stroke_color":this.currentObject.strokeColor = d; break; case"stroke_dash_array":this.currentObject.strokeDashArray = d; break; case"fill_color":this.currentObject.fillColor = d; break; case"opacity":this.currentObject.opacity = d; break}}}}; ClassUtil.extend(b, a); return b}()); var TriangleDrawingTool = (function(){var a = MultipleStrokeDrawingTool; function b(c){a.call(this, c); this.currentStep = b.prototype.STEP.INITIAL; this.currentObject = null}b.prototype = {STEP:{INITIAL:0, FIRST_POINT:1, SECOND_POINT:2, THIRD_POINT:3}, disengage:function(){a.prototype.disengage.call(this); if (this.currentStep !== b.prototype.STEP.INITIAL){this.lessonPage.removeDrawingObject(this.currentObject); this.currentObject = null; this.currentStep = b.prototype.STEP.INITIAL}}, onEventStart:function(e, d){e = this.lessonPage.snapPosition(e); a.prototype.onEventStart.call(this, e, d); var c; switch (this.currentStep){case b.prototype.STEP.INITIAL:c = this.crateNewObject(); this.setObjectDrawingChoices(c); this.lessonPage.addDrawingObject(c); c.p1 = e.clone(); c.p2 = e.clone(); c.p3 = e.clone(); c.expandToFullScreen(this.lessonPage.getWidth(), this.lessonPage.getHeight()); this.currentObject = c; this.currentStep = b.prototype.STEP.SECOND_POINT; break; case b.prototype.STEP.FIRST_POINT:this.currentObject.p2 = e.clone(); this.currentObject.p3 = e.clone(); this.currentStep = b.prototype.STEP.SECOND_POINT; break; case b.prototype.STEP.SECOND_POINT:this.currentObject.p3 = e.clone(); this.currentStep = b.prototype.STEP.THIRD_POINT; break}}, onEventMove:function(d, c){d = this.lessonPage.snapPosition(d); a.prototype.onEventMove.call(this, d, c); switch (this.currentStep){case b.prototype.STEP.SECOND_POINT:this.currentObject.p2 = d.clone(); this.currentObject.p3 = d.clone(); break; case b.prototype.STEP.THIRD_POINT:this.currentObject.p3 = d.clone(); break}}, onEventEnd:function(e, d){e = this.lessonPage.snapPosition(e); a.prototype.onEventEnd.call(this, e, d); var c; switch (this.currentStep){case b.prototype.STEP.SECOND_POINT:c = this.currentObject.p1.distanceToPoint(e); if (c < UserPreferences.minimumLineLength){this.currentObject.p2 = this.currentObject.p1.clone(); this.currentObject.p3 = this.currentObject.p1.clone(); this.currentStep = b.prototype.STEP.FIRST_POINT} else{this.currentObject.p2 = e.clone(); this.currentObject.p3 = e.clone()}break; case b.prototype.STEP.THIRD_POINT:if (this.currentObject.p1.distanceToPoint(e) < UserPreferences.minimumLineLength || this.currentObject.p2.distanceToPoint(e) < UserPreferences.minimumLineLength){this.currentObject.p3 = this.currentObject.p2.clone(); this.currentStep = b.prototype.STEP.SECOND_POINT} else{this.currentObject.p3 = e.clone(); this.currentObject.cropToMinimumSize(); this.addObjectAddRemoveAction(this.currentObject); this.currentObject = null; this.currentStep = b.prototype.STEP.INITIAL}break}}}; ClassUtil.extend(b, a); return b}()); var PolylineDrawingTool = (function(){var a = MultipleStrokeDrawingTool; function b(c){a.call(this, c); this.currentObject}b.prototype = {disengage:function(){a.prototype.disengage.call(this); this.finalizeCurrentObject()}, finalizeCurrentObject:function(){if (!this.currentObject){return}this.currentObject.showJoinIndicators = false; this.currentObject.cropToMinimumSize(); this.addObjectAddRemoveAction(this.currentObject); this.currentObject = null}, onEventStart:function(f, e){var c, d; f = this.lessonPage.snapPosition(f); a.prototype.onEventStart.call(this, f, e); if (!this.currentObject){c = this.crateNewObject(); this.setObjectDrawingChoices(c); this.lessonPage.addDrawingObject(c); c.points = [f.clone(), f.clone()]; c.showJoinIndicators = true; c.expandToFullScreen(this.lessonPage.getWidth(), this.lessonPage.getHeight()); this.currentObject = c} else{d = this.currentObject.points; d.push(f.clone()); this.currentObject.points = d}}, onEventMove:function(f, e){var c, d; f = this.lessonPage.snapPosition(f); a.prototype.onEventMove.call(this, f, e); c = this.currentObject.points; d = this.getSnapIndex(c, f); if (d >= 0){f = c[d]}c[c.length - 1] = f.clone(); this.currentObject.points = c}, onEventEnd:function(g, f){var c, e, d; g = this.lessonPage.snapPosition(g); a.prototype.onEventEnd.call(this, g, f); c = this.currentObject.points; e = this.getSnapIndex(c, g); if (e === 0){c.pop(); this.currentObject.points = c; this.currentObject.closed = true; this.finalizeCurrentObject()} else{if (e > 0){d = c[e]; c[c.length - 1] = d.clone(); this.currentObject.points = c; this.finalizeCurrentObject()} else{c[c.length - 1] = g.clone(); if (c.length > 1 && g.distanceToPoint(c[c.length - 2]) < UserPreferences.minimumLineLength){c.pop()}this.currentObject.points = c}}}, getSnapIndex:function(f, g){var d; d = UserPreferences.polygonSnapThreshold; if (!d){return - 1}for (var e = 0, c = f.length - 3; e < c; ++e){if (g.distanceToPoint(f[e]) < d){return e}}return - 1}}; ClassUtil.extend(b, a); return b}()); var ZoomTool = (function(){var b = BaseTool; function a(d, c){b.call(this); this.$frame = d; this.scaleFactor = c || 4; this.prevTool; this.eventTracker}a.prototype = {initialize:function(){b.prototype.initialize.call(this); this.eventTracker = new EventTracker(this.lessonPage.getEventLayer(), {endDelay:0, maxPipeCount:1, onStart:$.proxy(this.onEvent, this)}); this.eventTracker.initialize()}, engage:function(){b.prototype.engage.call(this); this.$frame.css("transform", ""); this.lessonPage.showEventLayer(); this.eventTracker.attach()}, disengage:function(){b.prototype.disengage.call(this); this.eventTracker.detach(); this.lessonPage.hideEventLayer()}, onEvent:function(g, c){var d, j, i, h, e, l, k, f; d = this.$frame.width(); j = this.$frame.height(); i = g.x; h = g.y; e = this.scaleFactor; l = (d / 2) - (i * e); k = (j / 2) - (h * e); l = Math.min(Math.max(l, (1 - e) * d), 0); k = Math.min(Math.max(k, (1 - e) * j), 0); f = "translate(" + l + "px," + k + "px) scale(" + e + ")"; this.$frame.css("transform", f); this.controller.onZoomedIn(this.prevTool)}}; ClassUtil.extend(a, b); return a}()); var SelectionTool = (function(){var a = BaseTool; function b(){a.call(this); this.eventTracker; this.currentObject; this.eventStartPos; this.objectStartPos}b.prototype = {initialize:function(){a.prototype.initialize.call(this); this.eventTracker = new EventTracker(this.lessonPage.getEventLayer(), this.getEventTrackerOptions()); this.eventTracker.initialize()}, getEventTrackerOptions:function(){var c; c = {}; c.endDelay = 0; c.maxPipeCount = 1; c.onStart = $.proxy(this.onEventStart, this); c.onMove = $.proxy(this.onEventMove, this); c.onEnd = $.proxy(this.onEventEnd, this); return c}, engage:function(){a.prototype.engage.call(this); this.lessonPage.showEventLayer(); this.eventTracker.attach()}, disengage:function(){a.prototype.disengage.call(this); this.eventTracker.detach(); this.lessonPage.hideEventLayer()}, onEventStart:function(d, c){this.currentObject = this.lessonPage.getDrawingObjectAt(d); if (this.currentObject){this.eventStartPos = d.clone(); this.objectStartPos = new Point(this.currentObject.x, this.currentObject.y)}}, onEventMove:function(h, g){if (!this.currentObject){return}var e, d, c, f; e = h.x - this.eventStartPos.x; d = h.y - this.eventStartPos.y; c = this.objectStartPos.x + e; f = this.objectStartPos.y + d; this.currentObject.x = c; this.currentObject.y = f}, onEventEnd:function(h, g){if (!this.currentObject){return}var e, d, c, f; e = h.x - this.eventStartPos.x; d = h.y - this.eventStartPos.y; c = this.objectStartPos.x + e; f = this.objectStartPos.y + d; this.currentObject.x = c; this.currentObject.y = f; this.addMoveAction(this.currentObject, this.objectStartPos, new Point(c, f)); this.currentObject = null; this.objectStartPos = null; this.eventStartPos = null}, addMoveAction:function(d, g, c){var e, f; e = TweenMax.fromTo(d, 0.5, {x:g.x, y:g.y}, {x:c.x, y:c.y, ease:Power1.easeInOut}); e.progress(1); f = new ReversibleTweenAction(e); this.controller.addNewAction(f)}}; ClassUtil.extend(b, a); return b}()); var EraserTool = (function(){var a = BaseTool; function b(){a.call(this)}b.prototype = {}; ClassUtil.extend(b, a); return b}()); var BasePatternGrid = (function(){function a(){this.$elem; this.width; this.height; this.pattern; this.$canvas}a.prototype = {preparePattern:function(){}, correctWidthAndHeight:function(){}, setupContext:function(b){b.lineWidth = 1; b.strokeStyle = "#000000"; b.globalAlpha = UserPreferences.gridOpacity}, attachTo:function(b){var c, d, e; this.$elem = b; this.width = this.$elem.width(); this.height = this.$elem.height(); this.correctWidthAndHeight(); this.pattern = $("<canvas/>")[0]; this.preparePattern(); this.$canvas = $("<canvas/>"); this.$canvas.addClass("layer"); c = this.$canvas[0]; c.width = this.width; c.height = this.height; d = c.getContext("2d"); e = d.createPattern(this.pattern, "repeat"); d.fillStyle = e; d.rect(0, 0, this.width, this.height); d.fill(); this.$elem.before(this.$canvas); return this.$canvas}, detach:function(){this.$canvas.remove()}, snapPosition:function(b){return b}}; return a}()); var SquarePatternGrid = (function(){var b = BasePatternGrid; function a(c){this.size = c || 25}a.prototype = {preparePattern:function(){b.prototype.preparePattern.call(this); var c; this.pattern.width = this.size; this.pattern.height = this.size; c = this.pattern.getContext("2d"); c.save(); this.setupContext(c); c.beginPath(); c.moveTo(0, this.size); c.lineTo(0, 0); c.lineTo(this.size, 0); c.stroke(); c.restore()}, snapPosition:function(e){e = b.prototype.snapPosition.call(this, e); var c, d; c = e.x; d = e.y; c = this.size * Math.round(c / this.size); d = this.size * Math.round(d / this.size); e.x = c; e.y = d; return e}}; ClassUtil.extend(a, b); return a}()); var LinePatternGrid = (function(){var a = BasePatternGrid; function b(c){this.size = c || 50}b.prototype = {correctWidthAndHeight:function(){a.prototype.correctWidthAndHeight.call(this); this.height = this.size * Math.floor(this.height / this.size)}, preparePattern:function(){a.prototype.preparePattern.call(this); var c; this.pattern.width = 1; this.pattern.height = this.size; c = this.pattern.getContext("2d"); c.save(); this.setupContext(c); c.beginPath(); c.moveTo(0, 0); c.lineTo(1, 0); c.stroke(); c.restore()}}; ClassUtil.extend(b, a); return b}()); var Mesh1PatternGrid = (function(){var a = BasePatternGrid; function b(c){this.size = c || 50}b.prototype = {preparePattern:function(){a.prototype.preparePattern.call(this); var c; this.pattern.width = this.size; this.pattern.height = this.size; c = this.pattern.getContext("2d"); c.save(); this.setupContext(c); c.beginPath(); c.moveTo(this.size, this.size); c.lineTo(0, 0); c.lineTo(this.size, 0); c.lineTo(0, this.size); c.lineTo(0, 0); c.stroke(); c.restore()}, snapPosition:function(j){j = a.prototype.snapPosition.call(this, j); var c, i, h, f, e, d, g; c = j.x; i = j.y; h = this.size * Math.floor(c / this.size); f = this.size * Math.floor(i / this.size); e = (c - h) / this.size; d = (i - f) / this.size; g = Math.floor((e + d) * 2); if (g === 0){c = h; i = f} else{if (g === 3){c = h + this.size; i = f + this.size} else{g = Math.floor(((1 - e) + d) * 2); if (g === 0){c = h + this.size; i = f} else{if (g === 3){c = h; i = f + this.size} else{c = h + (this.size / 2); i = f + (this.size / 2)}}}}j.x = c; j.y = i; return j}}; ClassUtil.extend(b, a); return b}()); var Mesh2PatternGrid = (function(){var a = BasePatternGrid; function b(c){this.size = c || 50; this.meshWidth; this.meshHeight}b.prototype = {calculateMeshWidth:function(){return 2 * this.size * Math.round(Math.sqrt(3) / 2)}, preparePattern:function(){a.prototype.preparePattern.call(this); var c, d; this.meshWidth = this.calculateMeshWidth(); this.meshHeight = this.size; this.pattern.width = this.meshWidth; this.pattern.height = this.meshHeight; c = this.pattern.getContext("2d"); c.save(); this.setupContext(c); c.beginPath(); c.moveTo(this.meshWidth, 0); c.lineTo(0, this.meshHeight); c.lineTo(0, 0); c.lineTo(this.meshWidth, this.meshHeight); c.moveTo(0, 0); c.lineTo(0, this.meshHeight); d = this.meshWidth / 2; c.moveTo(d, 0); c.lineTo(d, this.meshHeight); c.stroke(); c.restore()}, snapPosition:function(j){j = a.prototype.snapPosition.call(this, j); var c, i, h, f, e, d, g; c = j.x; i = j.y; h = this.meshWidth * Math.floor(c / this.meshWidth); f = this.meshHeight * Math.floor(i / this.meshHeight); e = (c - h) / this.meshWidth; d = (i - f) / this.meshHeight; g = Math.floor((e + d) * 2); if (g === 0){c = h; i = f} else{if (g === 3){c = h + this.meshWidth; i = f + this.meshHeight} else{g = Math.floor(((1 - e) + d) * 2); if (g === 0){c = h + this.meshWidth; i = f} else{if (g === 3){c = h; i = f + this.meshHeight} else{c = h + (this.meshWidth / 2); i = f + (this.meshHeight / 2)}}}}j.x = c; j.y = i; return j}}; ClassUtil.extend(b, a); return b}()); var MusicPatternGrid = (function(){var a = BasePatternGrid; function b(e, d, c){this.lineHeight = e || 20; this.topGap = d || 70; this.bottomGap = c || 30; this.fullHeight = this.topGap + this.bottomGap + (4 * this.lineHeight)}b.prototype = {correctWidthAndHeight:function(){a.prototype.correctWidthAndHeight.call(this); this.height = this.fullHeight * Math.floor(this.height / this.fullHeight)}, preparePattern:function(){a.prototype.preparePattern.call(this); var e, c; this.pattern.width = 1; this.pattern.height = this.fullHeight; e = this.pattern.getContext("2d"); e.save(); this.setupContext(e); e.beginPath(); for (var d = 0; d < 5; ++d){c = this.topGap + (d * this.lineHeight); e.moveTo(0, c); e.lineTo(1, c)}e.stroke(); e.restore()}}; ClassUtil.extend(b, a); return b}()); var WritingPatternGrid = (function(){var a = BasePatternGrid; function b(e, f, d, c){this.lineHeight = e || 20; this.horizontalSpan = f || 30; this.topGap = d || 70; this.bottomGap = c || 30; this.fullHeight = this.topGap + this.bottomGap + (3 * this.lineHeight)}b.prototype = {correctWidthAndHeight:function(){a.prototype.correctWidthAndHeight.call(this); this.height = this.fullHeight * Math.floor(this.height / this.fullHeight)}, preparePattern:function(){a.prototype.preparePattern.call(this); var e, c; this.pattern.width = this.horizontalSpan; this.pattern.height = this.fullHeight; e = this.pattern.getContext("2d"); e.save(); this.setupContext(e); e.beginPath(); for (var d = 0; d < 4; ++d){c = this.topGap + (d * this.lineHeight); e.moveTo(0, c); e.lineTo(this.horizontalSpan, c); if (d === 3){e.moveTo(0, c); e.lineTo(this.horizontalSpan, this.topGap)}}e.stroke(); e.restore()}}; ClassUtil.extend(b, a); return b}()); var BlankPageController = (function(){var a = BaseController; function b(){a.call(this); this.tabAndFrame; this.$container; this.lessonPage; this.currentToolName; this.currentTool; this.currentGrid = "none"; this.actionInProgress = false; this.undoStack = []; this.redoStack = []; this.onActionCompletedHandle}b.prototype = {initialize:function(){a.prototype.initialize.call(this); this.onActionCompletedHandle = $.proxy(this.onActionCompleted, this); this.$container = $("#container"); this.lessonPage = new LessonPage(this.$container); this.lessonPage.initialize()}, onResume:function(){var c; c = this.parentController.getSelectedTool(); this.setTool(c); this.parentController.setGridChoice(this.currentGrid)}, getToolByName:function(c){switch (c){case"select":return new SelectionTool(); case"pencil":return new FreeDrawingTool(PencilObject); case"line":return new LineDrawingTool(LineObject); case"marker":return new LineDrawingTool(MarkerObject); case"arrow":return new LineDrawingTool(ArrowObject); case"rectangle":return new RectangleDrawingTool(RectangleObject); case"circle":return new CircleDrawingTool(CircleObject); case"triangle":return new TriangleDrawingTool(TriangleObject); case"polyline":return new PolylineDrawingTool(PolylineObject); case"zoom":return new ZoomTool(this.tabAndFrame.getFrame(), UserPreferences.zoomScaleFactor)}}, setTool:function(d){var c; c = this.currentToolName; if (c){this.$container.removeClass("cursor_" + c)}if (this.currentTool){this.currentTool.disengage(); this.currentTool = null; this.currentToolName = null}this.currentToolName = d; if (this.currentToolName){this.$container.addClass("cursor_" + this.currentToolName)}this.currentTool = this.getToolByName(d); if (this.currentTool){this.currentTool.controller = this; this.currentTool.lessonPage = this.lessonPage; if (this.currentToolName === "zoom"){this.currentTool.prevTool = c}this.currentTool.initialize(); this.currentTool.engage()}}, getGridByName:function(c){switch (c){case"square":return new SquarePatternGrid(25); case"line":return new LinePatternGrid(50); case"mesh1":return new Mesh1PatternGrid(50); case"mesh2":return new Mesh2PatternGrid(50); case"music":return new MusicPatternGrid(20, 70, 30); case"writing":return new WritingPatternGrid(20, 30, 70, 30)}}, setGrid:function(c){this.currentGrid = c; this.lessonPage.setGrid(this.getGridByName(c))}, getDrawingChoice:function(c){return this.parentController.getDrawingChoice(c)}, setDrawingChoice:function(c, d){if (this.currentTool && this.currentTool.setDrawingChoice){this.currentTool.setDrawingChoice(c, d)}}, onZoomedIn:function(c){this.parentController.setSelectedTool(c); this.setTool(c)}, clear:function(){this.lessonPage.clearDrawingObjects(); this.undoStack = []; this.redoStack = []}, undo:function(){if (this.actionInProgress || !this.undoStack.length){return}var c; this.actionInProgress = true; c = this.undoStack.pop(); this.redoStack.push(c); c.undoAction(this.onActionCompletedHandle)}, redo:function(){if (this.actionInProgress || !this.redoStack.length){return}var c; this.actionInProgress = true; c = this.redoStack.pop(); this.undoStack.push(c); c.doAction(this.onActionCompletedHandle)}, onActionCompleted:function(){this.actionInProgress = false; this.drawThumbnail()}, addNewAction:function(c){while (this.undoStack.length >= UserPreferences.undoStackSize){this.undoStack.shift()}this.undoStack.push(c); this.redoStack = []; this.drawThumbnail()}, drawThumbnail:function(){var c; c = this.lessonPage.cloneHtml(); this.tabAndFrame.getThumbnail().html(c)}}; ClassUtil.extend(b, a); return b}());